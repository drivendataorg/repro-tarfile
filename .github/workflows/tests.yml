name: tests

on:
  push:
    branches: [main]
  pull_request:
  schedule:
    # Run every Sunday
    - cron: "0 0 * * 0"
  workflow_dispatch:

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: |
            pyproject.toml

      - name: Install hatch
        run: |
          uv tool install hatch

      - name: Lint package
        run: |
          hatch run lint
          hatch run typecheck

  tests:
    name: "Tests (${{ matrix.os }}, Python ${{ matrix.python-version }})"
    needs: code-quality
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
        include:
          - os: ubuntu-latest
            python-version: "3.11.3"

    steps:
      - uses: actions/checkout@v4

      - uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: |
            pyproject.toml

      - name: Install hatch
        run: |
          uv tool install hatch

      - name: Install Python 3.11.3
        if: ${{ matrix.python-version == '3.11.3' }}
        run: |
          uv python install 3.11.3

      - name: Run tests
        run: |
          hatch run tests.py${{ matrix.python-version }}:test

      - name: Upload coverage to codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          fail_ci_if_error: ${{ (github.event_name == 'push' && true) || (github.event_name == 'pull_request' && true) || false }}
        if: ${{ matrix.os == 'ubuntu-latest' }}

      - name: Build distribution and test installation
        shell: bash
        run: |
          hatch build
          if [[ ${{ matrix.os }} == "windows-latest" ]]; then
            PYTHON_BIN=Scripts/python
          else
            PYTHON_BIN=bin/python
          fi
          echo "=== Testing wheel installation ==="
          python -m venv .venv-whl
          .venv-whl/$PYTHON_BIN -m pip install --upgrade pip
          .venv-whl/$PYTHON_BIN -m pip install dist/repro_tarfile-*.whl
          .venv-whl/$PYTHON_BIN -c "from repro_tarfile import ReproducibleTarFile"
          echo "=== Testing source installation ==="
          python -m venv .venv-sdist
          .venv-sdist/$PYTHON_BIN -m pip install --upgrade pip
          .venv-sdist/$PYTHON_BIN -m pip install dist/repro_tarfile-*.tar.gz --force-reinstall
          .venv-sdist/$PYTHON_BIN -c "from repro_tarfile import ReproducibleTarFile"

  notify:
    name: Notify failed build
    needs: [code-quality, tests]
    if: failure() && (github.event_name == 'push' || github.event_name == 'schedule')
    runs-on: ubuntu-latest
    steps:
      - uses: jayqi/failed-build-issue-action@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
